#!/bin/bash 
shopt -s extglob
export LC_COLLATE=C

mkdir DBs   # To create directory in the first time .. in the second time it will generate an error but it will disapear because (clear) in raw NO. 5!
cd DBs
clear

########################## DB level ##########################################
function Create_DB
{ 
    ReadDBNameFromUSer
    if test -d $DBname
    then
        zenity --warning --title="Already exists!" --text="$DBname already exists!" --no-wrap
    else
        mkdir $DBname
        #echo "Database $DBname has been created successfully :)"
        zenity --info --title="success" --text="Database $DBname has been created successfully :)" --no-wrap
    fi

    MainDB
}

function Open_DB
{
    ReadDBNameFromUSer  
    if test -d $DBname
    then
        cd $DBname
        pwd
        echo "Done."
        MainTables
    else
        zenity --error --title="Error!" --text="$DBname doesn't exist!" --no-wrap
    fi

    MainDB
}

function Drop_DB
{
    ReadDBNameFromUSer
    if [ -d $DBname ]
    then 
        if zenity --question --title="Confirm deletion" --text="Are you sure you want to delete this Database?" --no-wrap 
        then
            rm -r $DBname
            zenity --info --title="Success" --text="$DBname has been removed successfully" --no-wrap
        fi
    else
        zenity --error --title="Error!" --text="$DBname doesn't exist!" --no-wrap
    fi  

    MainDB       
}

function list_DBs
{
    if [ "$(ls -A)" ]
    then
        echo -e "Available Database/s: ";ls
        echo -e "\n"  
    else
        zenity --error --title="Error!" --text="No Databases to show!" --no-wrap
    fi

    MainDB 
}

#### Auxiliary function, Reading Database name from the user ####################
function ReadDBNameFromUSer
{
    DBname=$(zenity --entry --title="Enter Database name")   
}

##################################  Tables level ###############################################
 
function List_All_Tables
{
    #whiptail --title "Available Tables" --infobox ls 8 78
    ls;MainTables
}

function Open_Certain_table
{
    ReadTableNameFromUSer
    if [ -f $Tablename ]
    then
        #cat $Tablename
        Record_stage $Tablename
    else
        zenity --error --title="Error!" --text="$Tablename doesn't exist!" --no-wrap
    fi

    MainTables
}

function Create_table
{
    ReadTableNameFromUSer
    if [ -f $Tablename ]
    then
        zenity --error --title="Error!" --text="$Tablename already exist!" --no-wrap
    else
        
        while ! [[ $columnsNumber =~ ^[0-9]+$ ]]
        do
           columnsNumber=$(zenity --entry --title="Number of Columns")
        done
        
        seperator="|"
        raw_seperator="\n"
        pkey=""

        metaData_def="Column Name"$seperator"Type"$seperator"Primary Key"
        
        showNumber=1
        declare -A metaData_data
        for (( counter = 0; counter < $columnsNumber; counter++ ));
        do
            _counter=0
            echo -e "Name of Column Number "$showNumber": \c"
            read columnName
            ((showNumber++))
            data[$counter]=$columnName
            metaData_data[$counter,$_counter]=$columnName # metaData_data[0,0] = id
            ((_counter++))

            echo -e "Type of Column $columnName: " 
            select type in "integer" "string"
            do
                case $type in
                    integer ) columnType="int"; 
                    break
                    ;;
                    string ) columnType="str";
                    break
                    ;;
                    * ) zenity --error --title="Error!" --text="Invalid Input :(" --no-wrap
                    ;;
                esac
            done
            metaData_data[$counter,$_counter]=$columnType # metaData_data[0,1] = type(int or str)
            ((_counter++))

            if [[ $pKey == "" ]]; 
            then
                echo -e "Make Primary Key ?"
                select var in "yes" "no"
                do
                    case $var in
                        yes ) pKey="PK"; metaData_data[$counter,$_counter]="$pKey";
                        break
                        ;;
                        no ) metaData_data[$counter,$_counter]="";
                        break
                        ;;
                        * )  
                            zenity --error --title="Error!" --text="Invalid Input :(" --no-wrap
                        ;;
                    esac
                done
            else
                metaData_data[$counter,$_counter]="";
            fi

        done
        
        if [[ $pKey != "" ]]
        then 
                # Print MetaData
                touch .$Tablename
                echo -e $metaData_def >> .$Tablename
                for (( counter = 0; counter < $columnsNumber; counter++ ));
                do  
                    for (( _counter = 0; _counter < 3; _counter++ ));
                    do
                        if [ $_counter == 2 ]
                        then
                            echo -n -e "${metaData_data[$counter,$_counter]}" >> .$Tablename
                        else
                            echo -n -e "${metaData_data[$counter,$_counter]}""$seperator" >> .$Tablename  
                        fi 
                    done  
                    echo -n -e "$raw_seperator" >> .$Tablename  
                done

                # Print Actual Data
                touch $Tablename
                ((flag=$columnsNumber-1))
                for (( counter = 0; counter < $columnsNumber; counter++ )); 
                do
                    if [[ $counter == $flag ]]
                    then
                        echo -n "${data[$counter]}"  >> $Tablename
                        echo -n -e "$raw_seperator" >> $Tablename
                    else
                        echo -n "${data[$counter]}""$seperator" >> $Tablename
                    fi
                done
        fi
        # Check The Process
        if [[ $? == 0 && $pKey != "" ]]
        then
            zenity --info --title="Completed!" --text="Table Created Successfully :)" --no-wrap
        else
            zenity --error --title="Error" --text="NOT Successful Creation of Table $Tablename ! \n You must set a column as a primary key" --no-wrap
        fi
    fi      
    MainTables
}

function Drop_table
{
    ReadTableNameFromUSer
    if [ -f $Tablename ]
    then 
        if zenity --question --title="Confirm deletion" --text="Are you sure you want to delete this table?" --no-wrap 
        then
             rm $Tablename .$Tablename
            zenity --info --title="Success" --text="$Tablename Table has been removed successfully :)" --no-wrap
        else 
            clear
        fi
    else
        zenity --error --title="Error!" --text="$Tablename Table doesn't exist!" --no-wrap
    fi  

    MainTables
}
#### Auxiliary function, Reading table name from the user #################### 
function ReadTableNameFromUSer
{
    Tablename=$(zenity --entry --title="Enter Table name")
}

################################# Record level #########################################
function InsertInto
{
      Tablename=$1
      row=""
      if ! [ -f $Tablename ]
      then 
           zenity --error --title="Error!" --text="Table $Tablename doesn't exist!" --no-wrap
      else
      #Get num of rows stored in metadata file which represents the num of columns
      noOfCol=$(awk -F: 'END{print NR}' .$Tablename)
      idx=2
      fs="|"
      colName=""
      colType=""
      colConstraint=""
      until [ $idx -gt $noOfCol ]
      do
         colName=`(awk -F'|' '{if(NR=='$idx') print $1}' .$Tablename)`
         colType=`(awk -F'|' '{if(NR=='$idx') print $2 }' .$Tablename)` 
         colConstraint=`(awk -F'|' '{if(NR=='$idx') print $3}' .$Tablename)`
         #echo -e "Enter data of column $colName : \c"
         #read data
         data=$(zenity --entry --title="Enter data of column $colName")
         #Validate data type 
         if [[ "$colType" == "str" ]]   
         then
           while [[ true ]]
            do
             case $data in
             +([a-z A-Z]) )
                  break
                  ;;
              *)
                 zenity --error --title="Error!" --text="Invalid data type! \n " --no-wrap
                 data=$(zenity --entry --title="Enter valid data type (string)")
                 #echo "Invalid data type!"
                 #echo -e "Enter valid data type (string): \c"
                 #read data
                 ;;
              esac
            done
         elif [[ "$colType" == "int" ]]
         then
           while [[ true ]]
            do
                    case $data in 
                    +([0-9]) )
                            # Check if the entered PK already exists
                                if [[ "$colConstraint" == "PK" ]]
                                then
                                    flag2=1
                                    let exist=0
                                    while [[ true ]]
                                    do
                                        #set -x
                                        exist=`(awk -F'|' '{if('$data'==$('$idx'-1)) print $('$idx'-1)}' $Tablename)`  #hydrb
                                        #echo $exist
                                        #set +x
                                        if ! [[ $exist -eq 0 ]]
                                        then
                                            zenity --error --title="Error!" --text="PK already exists! \n " --no-wrap
                                            data=$(zenity --entry --title="Enter unique PK")
                                            #echo "PK already exists!"
                                            #echo -e "Enter unique PK : \c"
                                            #read data
                                            exist=0
                                        else 
                                            break 
                                        fi
                                    done
                                fi
                                break
                        ;;
                    *) zenity --error --title="Error!" --text="Invalid data type! \n " --no-wrap
                         data=$(zenity --entry --title="Enter valid data type (int)")
                        #echo "Invalid data type!"
                        #echo -e "Enter valid data type (int): \c"
                        #read data
                        ;;
                    esac
            done
        fi
         
        # Set row data
        if ! [ $idx -eq $noOfCol ]
        then
            row=$row$data$fs  
        else
            row=$row$data
        fi
        ((idx++))
      done
     
      echo $row >> $Tablename
      if [ $? -eq 0 ]
        then 
            zenity --info --title="Success" --text="Data inserted successfully \n " --no-wrap
            #echo "Data inserted successfully"
        else
            zenity --error --title="Error" --text="Filed to insert data \n " --no-wrap
            #echo "Error !"
        fi
      fi
}

function delete_record
{
   Tablename=$1
   let idx=2
   pk=$(zenity --entry --title="Enter PK of the record you want to delete")
   #echo -e "Enter PK of the record u wanna delete: \c "
   #read
   noOfCol=$(awk -F: 'END{print NR}' .$Tablename)
   until [ $idx -gt $noOfCol ]
    do
         colConstraint=`(awk -F'|' '{if(NR=='$idx') print $3}' .$Tablename)`
         if [[ "$colConstraint" == "PK" ]]
        then
            # GET the Record number using the PK
            recordnumber=`(awk -F'|' '{if('$pk'==$('$idx'-1)) print NR}' $Tablename)`
            # Check if the entered PK exist? "Delete" : "not found!" 
            if [[ "$recordnumber" =~ ^[0-9]+$ ]]
            then
                    if zenity --question --title="Confirm deletion" --text="Are you sure you want to delete this record?" --no-wrap 
                    then
                           # Delete the record using the record number, then redirect to a new file and rename its name with table name :)
                          awk -v n=$recordnumber 'NR == n {next} {print}' $Tablename > tmp && mv tmp $Tablename
                    else 
                           zenity --warning --title="Warning" --text="Terminating without deleting" --no-wrap
                           break
                    fi     
            else
                zenity --error --title="Error!" --text="$pk doesn't exist!" --no-wrap
                #echo "NOT FOUND!"
                break
            fi
            if [ $? -eq 0 ]
            then 
                zenity --info --title="Success" --text="Record has been deleted successfully" --no-wrap
                #echo "Record deleted successfully"
            else
                 zenity --error --title="Error!" --text="Error deleting the record!" --no-wrap
                #echo "Error deleting the record!"
            fi
            break
        fi

    ((idx++))
    done
}

function MainDB
{  

    input=`(whiptail --title "Database Menu" --fb --menu "Choose an option" 15 50 6 \
    "1" "Create Database" \
    "2" "Open Database" \
    "3" "Drop Database"  \
    "4" "List Database"   \
    "5" "Exit" 3>&1 1>&2 2>&3)`
    case $input in
            1 ) 
                Create_DB
            ;;
            2 ) 
                Open_DB 
            ;;
            3 ) 
                Drop_DB
            ;;
            4 ) 
                list_DBs 
            ;;
            5 ) 
                clear; exit 0
            ;;
    esac
}

function MainTables
{
    input=`(whiptail --title "Tables Menu" --fb --menu "Choose an option" 15 50 6 \
    "1" "List All Tables" \
    "2" "Open Certain Table" \
    "3" "Create Table"  \
    "4" "Drop Table"   \
    "5" "Back to DB Menu" \
    "6" "Exit" 3>&1 1>&2 2>&3)`
    case $input in
            1 ) List_All_Tables 
            ;;
            2 ) Open_Certain_table 
            ;;
            3 ) Create_table 
            ;; 
            4 ) Drop_table
            ;;
            5 ) clear; cd ../; MainDB
            ;;
            6 ) clear; exit 0
            ;;
    esac
}
function Record_stage
{
    Tablename=$1
    input=`(whiptail --title "Records Menu" --fb --menu "Choose an option" 15 50 6 \
    "1" "Insert New Record" \
    "2" "Delete Record" \
    "3" "Update Certain Cell"  \
    "4" "Back to Tables Menu"   \
    "5" "Exit" 3>&1 1>&2 2>&3)`
    case $input in
            1 ) InsertInto $Tablename
            ;;
            2 ) delete_record $Tablename
            ;;
            3 ) Update_cell $Tablename
            ;; 
            4 ) clear; MainTables  
            ;;
            5 ) clear; exit 0
            ;;
    esac
    
}


MainDB
